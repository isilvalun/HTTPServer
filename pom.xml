<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- SPRING BOOT PROJECT -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.4</version>
		<relativePath/>
	</parent>
	<!-- ARTIFACT DEFINITION -->
	<artifactId>HTTPServer</artifactId>
	<groupId>com.vesinte.httpserver</groupId>
	<version>1.0</version>
	<packaging>jar</packaging>
	<description>Simple Multi-Threaded HTTP Server.</description>
	<!-- PROPERTY DEFINITION -->
	<properties>
		<java.version>17</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- Maven configurations -->
		<maven.test.skip.exec>true</maven.test.skip.exec>
		<maven.test.skip>true</maven.test.skip>
		<maven.install.skip>true</maven.install.skip>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<!-- Maven lifecycle versions -->
		<maven-dependency-plugin.version>3.3.0</maven-dependency-plugin.version>
		<maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
		<maven-compiler-plugin.version>3.9.0</maven-compiler-plugin.version>
		<maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
		<maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
		<maven-install-plugin.version>3.0.0-M1</maven-install-plugin.version>
		<maven-assembly-plugin.version>3.3.0</maven-assembly-plugin.version>
		<maven-antrun-plugin.version>3.0.0</maven-antrun-plugin.version>
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
		<!-- Spring Boot -->
		<spring-boot.version>${project.parent.version}</spring-boot.version>
		<!-- For ANT execution -->
		<ant.version>1.10.12</ant.version>
		<ant-contrib.version>1.0b3</ant-contrib.version>
		<!-- 3rd party library versions -->
		<slf4j.version>1.7.36</slf4j.version>
		<logback.version>1.2.11</logback.version>
		<picocli.version>4.6.3</picocli.version>
	</properties>
	<!-- LIFECYCLE DEFINITION -->
	<build>
		<directory>${project.basedir}/target</directory>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version><!--$NO-MVN-MAN-VER$-->
			</plugin>
			<!-- This plugin prepares build environment -->
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven-dependency-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
				<executions>
					<execution>
						<id>copy-jars</id>
						<phase>initialize</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<excludeTransitive>true</excludeTransitive>
							<excludeClassifiers>resources</excludeClassifiers>
							<includeTypes>jar</includeTypes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This plugin copies all resources used by project on output folder -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
			</plugin>
			<!-- This plugin compiles project based on classpath previously made -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
			</plugin>
			<!-- This plugin configures surefire plugin -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
				<executions>
					<execution>
						<id>default-test</id>
						<phase>none</phase>
						<configuration>
							<skip>true</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This plugin creates output JAR -->
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${maven-jar-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
			</plugin>
			<!-- Maven POM / Repo install -->
			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<version>${maven-install-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<!-- This plugin allows us to assemble a new output -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${maven-assembly-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
				<executions>
					<execution>
						<id>main-install</id>
						<phase>install</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<attach>false</attach>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>AppAssembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This plugin runs Ant xml. It's a sort of Post-build script, so we can clean-up final artifacts. -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${maven-antrun-plugin.version}</version><!--$NO-MVN-MAN-VER$-->
				<executions>
					<execution>
						<id>run-ant-install</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
<!-- ** START OF ANT SCRIPT ** -->

<property name="maven.project.basedir" value="${project.basedir}"/>
<ant antfile="ant.xml" target="run" />

<!-- ** END OF ANT SCRIPT ** -->
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${lifecycle-mapping.version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[${maven-dependency-plugin.version}]
										</versionRange>
										<goals>
											<goal>
												copy-dependencies
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<!-- DEPENDENCY DEFINITION -->
	<dependencies>
		<!-- SPRING BOOT DEPENDENCIES -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot</artifactId>
			<version>${spring-boot.version}</version><!--$NO-MVN-MAN-VER$-->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
			<version>${spring-boot.version}</version><!--$NO-MVN-MAN-VER$-->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- FOR ANT EXECUTION -->
		<dependency>
			<groupId>org.apache.ant</groupId>
			<artifactId>ant</artifactId>
			<version>${ant.version}</version>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.ant</groupId>
			<artifactId>ant-launcher</artifactId>
			<version>${ant.version}</version>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>ant-contrib</groupId>
			<artifactId>ant-contrib</artifactId>
			<version>${ant-contrib.version}</version>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- 3RD PARTY LIBRARIES -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version><!--$NO-MVN-MAN-VER$-->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version><!--$NO-MVN-MAN-VER$-->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version><!--$NO-MVN-MAN-VER$-->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
			<version>${picocli.version}</version><!--$NO-MVN-MAN-VER$-->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>
</project>